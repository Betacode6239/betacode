// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ContactQuery {
    id        Int      @id @default(autoincrement())
    name      String
    email     String   @unique
    phone     String?
    message   String?  @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
}

model Product {
    id             Int              @id @default(autoincrement())
    title          String
    desc           String?          @db.Text
    metaDesc       String?          @db.Text
    thumbnail      String?
    info           Json?
    gallery        Json?
    slug           String
    price          String?
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt()
    ProductEnquiry ProductEnquiry[]
}

model ProductEnquiry {
    id        Int      @id @default(autoincrement())
    name      String
    email     String   @unique
    phone     String?
    message   String?  @db.Text
    productId Int
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
}

model Enquiry {
    id        Int           @id @default(autoincrement())
    name      String
    email     String
    phone     String?
    type      String
    content   Json?
    status    EnquiryStatus @default(PENDING)
    createdAt DateTime      @default(now())
    updateAt  DateTime      @updatedAt
}

enum EnquiryStatus {
    PENDING
    READ
}

model Subscriber {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

model GeneralSetting {
    id      Int     @id @default(autoincrement())
    logo    String?
    contact Json?
}

model Setting {
    id    Int    @id @default(autoincrement())
    type  String @unique
    lable String
    value Json
}
